---

volumes:
  dhis2_files:
  dhis2_init_progress:
  pass_pg_dhis:
  pass_pg_postgres:
  pg_data:

services:

  pass_init:
    # Using the same image as dhis2, but with a different command
    image: "ghcr.io/baosystems/dhis2:${DHIS2_TAG:-latest}"
    volumes:
      - type: volume
        source: pass_pg_dhis
        target: /pass_pg_dhis
      - type: volume
        source: pass_pg_postgres
        target: /pass_pg_postgres
    command: >
      bash -c "
      if [[ ! -f /pass_pg_dhis/pass_pg_dhis.txt ]] ; then
        echo '[INFO]: Generating random string for /pass_pg_dhis/pass_pg_dhis.txt'
        cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1 > /pass_pg_dhis/pass_pg_dhis.txt
      fi ;
      if [[ ! -f /pass_pg_postgres/pass_pg_postgres.txt ]] ; then
        echo '[INFO]: Generating random string for /pass_pg_postgres/pass_pg_postgres.txt'
        cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1 > /pass_pg_postgres/pass_pg_postgres.txt
      fi
      "

  database:
    ## We will revert to the official image when ARM64 build is provided
    ## See https://github.com/postgis/docker-postgis/issues/216
    # image: "docker.io/postgis/postgis:${POSTGIS_TAG:-latest}"
    image: "ghcr.io/baosystems/postgis:${POSTGIS_TAG:-latest}"
    depends_on:
      pass_init:
        condition: service_completed_successfully
    restart: unless-stopped
    volumes:
      - type: volume
        source: pass_pg_postgres
        target: /pass_pg_postgres
        read_only: true
      - type: volume
        source: pg_data
        target: /var/lib/postgresql/data
        volume:
          nocopy: true
    environment:
      POSTGRES_PASSWORD_FILE: /pass_pg_postgres/pass_pg_postgres.txt  # referenced by the postgres image
    shm_size: 256mb  # https://github.com/docker-library/postgres/issues/416
    # Options "synchronous_commit" through "max_locks_per_transaction" are some of the DHIS2 recommendations (https://docs.dhis2.org/en/manage/performing-system-administration/dhis-core-version-236/installation.html#install_postgresql_installation)
    command: >
      postgres
        -c "listen_addresses=*"
        -c "shared_preload_libraries=pg_stat_statements"
        -c "synchronous_commit=off"
        -c "checkpoint_completion_target=0.8"
        -c "wal_writer_delay=10000ms"
        -c "random_page_cost=1.1"
        -c "max_locks_per_transaction=96"
    healthcheck:
      test: ["CMD", "pg_isready", "-Upostgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  dhis2_init:
    # Using the same image as dhis2, but with a different command
    image: "ghcr.io/baosystems/dhis2:${DHIS2_TAG:-latest}"
    depends_on:
      - database
    working_dir: /opt/dhis2/logs  # DHIS2 attempts to create an empty "{WORKDIR}/dhis.log" file on startup
    volumes:
      - type: volume
        source: dhis2_init_progress
        target: /dhis2-init.progress
      - type: volume
        source: dhis2_files
        target: /opt/dhis2/files
        volume:
          nocopy: true
      - type: volume
        source: pass_pg_dhis
        target: /pass_pg_dhis
        read_only: true
      - type: volume
        source: pass_pg_postgres
        target: /pass_pg_postgres
        read_only: true
    environment:
      DHIS2_DATABASE_HOST: database  # Matches the name of the Compose service running PostgreSQL
      DHIS2_DATABASE_PASSWORD_FILE: /pass_pg_dhis/pass_pg_dhis.txt
      DHIS2_INIT_SKIP: 20_dhis2-initwar.sh  # String like "item1.sh,item2.sh"; NOTE: Only skip "20_dhis2-initwar.sh" on stacks with a single Tomcat node
      PGPASSWORD_FILE: /pass_pg_postgres/pass_pg_postgres.txt
      WAIT_HOSTS: "database:5432"  # Matches the name and port of the Compose service running PostgreSQL
    command:
      - sh  # Override the image default
      - -c
      - "dhis2-init.sh && sleep infinity"

  dhis2:
    image: "ghcr.io/baosystems/dhis2:${DHIS2_TAG:-latest}"
    depends_on:
      - dhis2_init
    restart: unless-stopped
    working_dir: /opt/dhis2/logs
    volumes:
      - type: volume
        source: dhis2_init_progress
        target: /dhis2-init.progress
        read_only: true
      - type: volume
        source: dhis2_files
        target: /opt/dhis2/files
      - type: volume
        source: pass_pg_dhis
        target: /pass_pg_dhis
        read_only: true
    environment:
      DHIS2_DATABASE_HOST: database  # Matches the name of the Compose service running PostgreSQL
      DHIS2_DATABASE_PASSWORD_FILE: /pass_pg_dhis/pass_pg_dhis.txt
      DHIS2_SERVER_BASEURL: "http://localhost:8080"  # It's best to always set the hostname, even if it's "localhost"; if using, the protocol is required
      WAIT_HOSTS: "database:5432"  # Matches the name and port of the Compose service running PostgreSQL
      WAIT_PATHS: /dhis2-init.progress/dhis2-init_status.txt  # Allow for dhis2_init to complete (necessary in some cases where dhis2_init may not run again)
    healthcheck:  # NOTE: Compose will not re-create containers marked as unhealthy unless they exit.
      test: ["CMD", "curl", "-fsS", "http://localhost:8080/dhis-web-commons/security/login.action"]
      interval: 1m30s
      timeout: 30s
      retries: 3
      start_period: 60s

  reverse_proxy:
    image: "docker.io/caddy:${CADDY_TAG:-latest}"
    restart: unless-stopped
    command:
      - "caddy"
      - "reverse-proxy"
      - "--from=:8080"
      - "--to=dhis2:8080"
    ports:
      - target: 8080
        published: 8080  # Accessible on port 8080 on the host machine
        protocol: tcp

  web:
    image: "nginx:alpine"
    depends_on:
      - dhis2
    volumes:
      - ./nginx:/etc/nginx/conf.d
    ports:
      - "80:80"
